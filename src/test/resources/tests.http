### Service must be healthy
#@no-log
GET localhost:8080/actuator/health


### Find all must be empty at start
#@no-log
GET localhost:8080/api/v1/word-lists

> {%
    client.test("Response is 200", () => {
        client.assert(response.status == 200, "Response code is not 200")
    })

    console.log(`Response body list length: ${response.body.length}`);
    client.test("Test find all -> must be empty", () => {
        client.assert(response.body.length == 0, 'List must be empty')
    })
%}

###
#@no-log
POST localhost:8080/api/v1/word-lists
Content-Type: application/json

{
  "name": "Test1"
}

> {%
    client.test("Response is 200", () => {
        client.assert(response.status == 200, "Response code is not 200")
    })
%}

### Find all must return one element
#@no-log
GET localhost:8080/api/v1/word-lists

> {%
    client.test("Response is 200", () => {
        client.assert(response.status == 200, "Response code is not 200")
    })

    console.log(`Response body list length: ${response.body.length}`);
    client.test("Test find all -> must contain one element", () => {
        client.assert(response.body.length == 1, 'List must contain one element')
    })

    client.test("Element must contain id field", () => {
        client.assert(response.body[0].hasOwnProperty('id'), "Element must contain id")
    })

    client.global.set("word-list-id", response.body[0].id)
%}

### Add word to list
#@no-log
POST localhost:8080/api/v1/word-lists/{{word-list-id}}/words
Content-Type: application/json

{
  "word": "TEST WORD"
}

> {%
    client.test("Response is 200", () => {
        client.assert(response.status == 200, "Response code is not 200")
    })
%}


### Find all must return one element and contains one word
#@no-log
GET localhost:8080/api/v1/word-lists

> {%
    client.test("Response is 200", () => {
        client.assert(response.status == 200, "Response code is not 200")
    })

    console.log(`Response body list length: ${response.body.length}`);
    client.test("Test find all -> must contain one element", () => {
        client.assert(response.body.length == 1, 'List must contain one element')
    })

    client.test("Element must contain id field", () => {
        client.assert(response.body[0].hasOwnProperty('id'), "Element must contain id")
    })

    client.test("Element must contain one word", () => {
        client.assert(response.body[0].words.length == 1, "Element must contain one word in words array")
    })
%}

### Remove word from list 1
#@no-log
DELETE localhost:8080/api/v1/word-lists/{{word-list-id}}/words/TEST%20WORD


### Find all must return one element and does not contain words in words array
#@no-log
GET localhost:8080/api/v1/word-lists

> {%
    client.test("Response is 200", () => {
        client.assert(response.status == 200, "Response code is not 200")
    })

    console.log(`Response body list length: ${response.body.length}`);
    client.test("Test find all -> must contain one element", () => {
        client.assert(response.body.length == 1, 'List must contain one element')
    })

    client.test("Element must contain id field", () => {
        client.assert(response.body[0].hasOwnProperty('id'), "Element must contain id")
    })

    client.test("Element must not contains words", () => {
        client.assert(response.body[0].words.length == 0, "Element must contain words in words array")
    })
%}

### Delete word list
#@no-log
DELETE localhost:8080/api/v1/word-lists/{{word-list-id}}

> {%
    client.test("Response is 200", () => {
        client.assert(response.status == 200, "Response code is not 200")
    })
%}

### Find all must return one element and does not contain words in words array
#@no-log
GET localhost:8080/api/v1/word-lists

> {%
    client.test("Response is 200", () => {
        client.assert(response.status == 200, "Response code is not 200")
    })

    client.test("Test find all -> must not contains elements", () => {
        client.assert(response.body.length == 0, 'List must not contains elements')
    })

    client.global.clearAll();
%}
